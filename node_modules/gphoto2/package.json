{
  "author": {
    "name": "Leonhardt Wille",
    "email": "hallo@leonhardt-wille.de"
  },
  "name": "gphoto2",
  "description": "Node.js wrapper for libgphoto2",
  "version": "0.1.1",
  "homepage": "https://www.riverlabs.de",
  "repository": {
    "type": "git",
    "url": "git://github.com/lwille/node-gphoto2.git"
  },
  "engines": {
    "node": "0.8.x"
  },
  "main": "build/Release/gphoto2.node",
  "dependencies": {},
  "devDependencies": {
    "coffee-script": "1.3.x",
    "express": "2.5.x",
    "underscore": "1.3.x",
    "jade": "0.26.0",
    "superagent": "0.4.x",
    "mocha": "1.0.x",
    "should": "0.6.x",
    "sinon": "1.3.x",
    "async": "0.1.x"
  },
  "scripts": {
    "prepublish": "node-gyp clean",
    "test": "mocha test/*.test.coffee",
    "install": "node-gyp rebuild"
  },
  "gypfile": true,
  "readme": "# node-gphoto2\nA Node.js wrapper for [libgphoto2](http://www.gphoto.org). Useful for remote controlling of DSLRs and other digital cameras supported by [gphoto2](http://www.gphoto.org).\n\n\nThe included test application currently allows you to\n\n* receive a live preview of your camera (if supported). Tested with an EOS 550D on a 2010 iMac at ~17 fps using Chrome (Safari doesn't work and FF is slow as hell).\n* query a list of available configuration options\n* query the values of specific configuration options\n\nThe test suite can be run using ``npm test``. There's also a small test application in test/test-server.coffee which runs on http://localhost:1337 and allows to change camera settings and to\ntake pictures.\n\n## Prerequisites\n* Node.js ~0.8.14\n* NPM ~1.1.65\n* libgphoto2 ~2.4.14 - via ``brew install libgphoto2``, ``apt-get install libgphoto2-2-dev`` or download and build from http://www.gphoto.org/proj/libgphoto2/\n* clang compiler\n\n## Test prerequisites\n* async\n* coffee-script\n* mocha\n* should\n* sinon\n\n## Test-server prerequisites\n* express\n* jade\n* underscore\n\n## Installation\n    npm install gphoto2\n\n## Usage\nThis example only shows how to achieve certain tasks, it's not meant to be executed without any asynchronous control flow logic.\n\n```javascript\ngphoto2 = require('gphoto2');\nGPhoto = new gphoto2.GPhoto2();\n\n// List cameras / assign list item to variable to use below options\nGPhoto.list(function(list){\n  if(list.length === 0) return;\n  var camera = list[0];\n  console.log(\"Found\", camera.model);\n\n  // get configuration tree\n  camera.getConfig(function(er, settings){\n    console.log(settings);\n  });\n\n  // Set configuration values\n  camera.setConfigValue('capturetarget', 1, function(er){\n    //...\n  })\n\n  // Take picture with camera object obtained from list()\n  camera.takePicture({download:true}, function(er, data){\n    fs.writeFile(\"picture.jpg\", data);\n  });\n\n  // Take picture without downloading immediately\n  camera.takePicture({download:false}, function(er, path){\n    console.log(path);\n  });\n\n  // Take picture and download it to filesystem\n  camera.takePicture({\n      download:true,\n      targetPath:'/tmp/foo.XXXXX'\n    }, function(er, tmpname){\n      fs.rename(tmpname, './picture.jpg');\n  });\n\n  // Download a picture from camera\n  camera.downloadPicture({\n      cameraPath:'/store_00020001/DCIM/100CANON/IMG_1231.JPG',\n      targetPath:'/tmp/foo.XXXXX'\n    }, function(er, tmpname){\n      fs.rename(tmpname, './picture.jpg');\n  });\n\n  // Get preview picture (from AF Sensor, fails silently if unsupported)\n  camera.getPreview(function(data){\n    fs.writeFile(\"picture.jpg\", data);\n  });\n});\n```\n",
  "readmeFilename": "README.md",
  "_id": "gphoto2@0.1.1",
  "_from": "gphoto2@"
}
